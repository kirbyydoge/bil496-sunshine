{"version":3,"sources":["../../../src/local/courseindex/courseindex.js"],"names":["Component","name","selectors","SECTION","SECTION_CMLIST","CM","TOGGLER","COLLAPSE","DRAWER","classes","SECTIONHIDDEN","CMHIDDEN","SECTIONCURRENT","COLLAPSED","SHOW","sections","cms","state","addEventListener","element","_sectionTogglers","getElements","forEach","section","dataset","id","cm","_refreshPageItem","course","contentTree","ContentTree","reactive","isEditing","watch","handler","_refreshSectionCollapsed","_createCm","_deleteCm","_createSection","_deleteSection","_refreshCourseSectionlist","_refreshSectionCmlist","event","sectionlink","target","closest","isChevron","toggler","querySelector","isCollapsed","classList","contains","sectionId","getAttribute","dispatch","indexcollapsed","getElement","Error","_expandSectionNode","forceValue","collapsibleId","replace","collapsible","document","getElementById","togglerValue","collapse","pageItem","isStatic","type","get","setTimeout","scrollIntoView","block","fakeelement","createElement","add","innerHTML","sectionid","exporter","getExporter","data","renderComponent","newcomponent","newelement","parentNode","replaceChild","cmlist","listparent","_fixOrder","sectionlist","container","neworder","allitems","length","remove","itemid","index","item","currentitem","children","append","insertBefore","removeChild","lastChild","BaseComponent"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/courseindex/courseindex\n * @class     core_courseformat/local/courseindex/courseindex\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport jQuery from 'jquery';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            CM: `[data-for='cm']`,\n            TOGGLER: `[data-action=\"togglecourseindexsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            DRAWER: `.drawer`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            SECTIONHIDDEN: 'dimmed',\n            CMHIDDEN: 'dimmed',\n            SECTIONCURRENT: 'current',\n            COLLAPSED: `collapsed`,\n            SHOW: `show`,\n        };\n        // Arrays to keep cms and sections elements.\n        this.sections = {};\n        this.cms = {};\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Get cms and sections elements.\n        const sections = this.getElements(this.selectors.SECTION);\n        sections.forEach((section) => {\n            this.sections[section.dataset.id] = section;\n        });\n        const cms = this.getElements(this.selectors.CM);\n        cms.forEach((cm) => {\n            this.cms[cm.dataset.id] = cm;\n        });\n\n        // Set the page item if any.\n        this._refreshPageItem({element: state.course, state});\n\n        // Configure Aria Tree.\n        this.contentTree = new ContentTree(this.element, this.selectors, this.reactive.isEditing);\n    }\n\n    getWatchers() {\n        return [\n            {watch: `section.indexcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            {watch: `cm:created`, handler: this._createCm},\n            {watch: `cm:deleted`, handler: this._deleteCm},\n            {watch: `section:created`, handler: this._createSection},\n            {watch: `section:deleted`, handler: this._deleteSection},\n            {watch: `course.pageItem:created`, handler: this._refreshPageItem},\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\n            // Sections and cm sorting.\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n        ];\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course index element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const isChevron = event.target.closest(this.selectors.COLLAPSE);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            if (isChevron || isCollapsed) {\n                // Update the state.\n                const sectionId = section.getAttribute('data-id');\n                this.reactive.dispatch(\n                    'sectionPreferences',\n                    [sectionId],\n                    {\n                        indexcollapsed: !isCollapsed,\n                    },\n                );\n            }\n        }\n    }\n\n    /**\n     * Update section collapsed.\n     *\n     * @param {object} args\n     * @param {object} args.element The leement to be expanded\n     */\n    _refreshSectionCollapsed({element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unkown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.indexcollapsed !== isCollapsed) {\n            this._expandSectionNode(element);\n        }\n    }\n\n    /**\n     * Expand a section node.\n     *\n     * By default the method will use element.indexcollapsed to decide if the\n     * section is opened or closed. However, using forceValue it is possible\n     * to open or close a section independant from the indexcollapsed attribute.\n     *\n     * @param {Object} element the course module state element\n     * @param {boolean} forceValue optional forced expanded value\n     */\n    _expandSectionNode(element, forceValue) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\n        if (!collapsibleId) {\n            return;\n        }\n        collapsibleId = collapsibleId.replace('#', '');\n        const collapsible = document.getElementById(collapsibleId);\n        if (!collapsible) {\n            return;\n        }\n\n        if (forceValue === undefined) {\n            forceValue = (element.indexcollapsed) ? false : true;\n        }\n\n        // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\n        // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\n        // it does not require jQuery anymore (when MDL-79179 is integrated).\n        const togglerValue = (forceValue) ? 'show' : 'hide';\n        jQuery(collapsible).collapse(togglerValue);\n    }\n\n    /**\n     * Handle a page item update.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.state the state data.\n     * @param {Object} details.element the course state data.\n     */\n    _refreshPageItem({element, state}) {\n        if (!element?.pageItem?.isStatic || element.pageItem.type != 'cm') {\n            return;\n        }\n        // Check if we need to uncollapse the section and scroll to the element.\n        const section = state.section.get(element.pageItem.sectionId);\n        if (section.indexcollapsed) {\n            this._expandSectionNode(section, true);\n            setTimeout(\n                () => this.cms[element.pageItem.id]?.scrollIntoView({block: \"nearest\"}),\n                250\n            );\n        }\n    }\n\n    /**\n     * Create a newcm instance.\n     *\n     * @param {object} param\n     * @param {Object} param.state\n     * @param {Object} param.element\n     */\n    async _createCm({state, element}) {\n        // Create a fake node while the component is loading.\n        const fakeelement = document.createElement('li');\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\n        fakeelement.innerHTML = '&nbsp;';\n        this.cms[element.id] = fakeelement;\n        // Place the fake node on the correct position.\n        this._refreshSectionCmlist({\n            state,\n            element: state.section.get(element.sectionid),\n        });\n        // Collect render data.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.cm(state, element);\n        // Create the new content.\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/cm', data);\n        // Replace the fake node with the real content.\n        const newelement = newcomponent.getElement();\n        this.cms[element.id] = newelement;\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\n    }\n\n    /**\n     * Create a new section instance.\n     *\n     * @param {Object} details the update details.\n     * @param {Object} details.state the state data.\n     * @param {Object} details.element the element data.\n     */\n    async _createSection({state, element}) {\n        // Create a fake node while the component is loading.\n        const fakeelement = document.createElement('div');\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\n        fakeelement.innerHTML = '&nbsp;';\n        this.sections[element.id] = fakeelement;\n        // Place the fake node on the correct position.\n        this._refreshCourseSectionlist({\n            state,\n            element: state.course,\n        });\n        // Collect render data.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.section(state, element);\n        // Create the new content.\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/section', data);\n        // Replace the fake node with the real content.\n        const newelement = newcomponent.getElement();\n        this.sections[element.id] = newelement;\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const listparent = this.getElement(this.selectors.SECTION_CMLIST, element.id);\n        this._fixOrder(listparent, cmlist, this.cms);\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _refreshCourseSectionlist({element}) {\n        const sectionlist = element.sectionlist ?? [];\n        this._fixOrder(this.element, sectionlist, this.sections);\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {Array} allitems the list of html elements that can be placed in the container\n     */\n    _fixOrder(container, neworder, allitems) {\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            const item = allitems[itemid];\n            // Get the current element at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            container.removeChild(container.lastChild);\n        }\n    }\n\n    /**\n     * Remove a cm from the list.\n     *\n     * The actual DOM element removal is delegated to the cm component.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _deleteCm({element}) {\n        delete this.cms[element.id];\n    }\n\n    /**\n     * Remove a section from the list.\n     *\n     * The actual DOM element removal is delegated to the section component.\n     *\n     * @param {Object} details the update details.\n     * @param {Object} details.element the element data.\n     */\n    _deleteSection({element}) {\n        delete this.sections[element.id];\n    }\n}\n"],"file":"courseindex.min.js"}