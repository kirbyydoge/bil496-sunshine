{"version":3,"sources":["../../../src/local/courseeditor/mutations.js"],"names":["action","courseId","ids","targetSectionId","targetCmId","args","courseid","targetsectionid","targetcmid","ajax","call","methodname","ajaxresult","JSON","parse","stateManager","addUpdateTypes","prepareFields","_prepareFields","updateName","fields","locked","cmids","Error","course","get","cmLock","_callEditWebservice","id","updates","processUpdates","sectionIds","sectionLock","cmIds","dragValue","setPageItem","_setElementsValue","complete","newValue","lockValue","name","fieldName","setReadOnly","forEach","element","type","isStatic","newPageItem","pageItem","sectionId","sectionid","state","section","cm","preferences","updatePreferences","contentcollapsed","indexcollapsed","prefKey","push","jsonString","stringify","M","util","set_user_preference"],"mappings":"8KAeA,uD,owBAwB8BA,C,CAAQC,C,CAAUC,C,CAAKC,C,CAAiBC,C,2FACxDC,C,CAAO,CACTL,MAAM,CAANA,CADS,CAETM,QAAQ,CAAEL,CAFD,CAGTC,GAAG,CAAHA,CAHS,C,CAKb,GAAIC,CAAJ,CAAqB,CACjBE,CAAI,CAACE,eAAL,CAAuBJ,CAC1B,CACD,GAAIC,CAAJ,CAAgB,CACZC,CAAI,CAACG,UAAL,CAAkBJ,CACrB,C,eACsBK,WAAKC,IAAL,CAAU,CAAC,CAC9BC,UAAU,CAAE,iCADkB,CAE9BN,IAAI,CAAJA,CAF8B,CAAD,CAAV,EAGnB,CAHmB,C,QAAnBO,C,iCAIGC,IAAI,CAACC,KAAL,CAAWF,CAAX,C,uJAWNG,C,CAAc,CAEfA,CAAY,CAACC,cAAb,CAA4B,CACxBC,aAAa,CAAE,KAAKC,cADI,CAA5B,CAGH,C,sDAYcH,C,CAAcI,C,CAAYC,C,CAAQ,CAE7CA,CAAM,CAACC,MAAP,IACA,MAAOD,CAAAA,CACV,C,4EAiBYL,C,CAAcO,C,CAAOnB,C,CAAiBC,C,gGAC3C,CAACD,CAAD,EAAoB,CAACC,C,uBACf,IAAImB,CAAAA,KAAJ,0D,QAEJC,C,CAAST,CAAY,CAACU,GAAb,CAAiB,QAAjB,C,CACf,KAAKC,MAAL,CAAYX,CAAZ,CAA0BO,CAA1B,K,eACsB,MAAKK,mBAAL,CAAyB,SAAzB,CAAoCH,CAAM,CAACI,EAA3C,CAA+CN,CAA/C,CAAsDnB,CAAtD,CAAuEC,CAAvE,C,QAAhByB,C,QACNd,CAAY,CAACe,cAAb,CAA4BD,CAA5B,EACA,KAAKH,MAAL,CAAYX,CAAZ,CAA0BO,CAA1B,K,4LAUcP,C,CAAcgB,C,CAAY5B,C,8FACnCA,C,sBACK,IAAIoB,CAAAA,KAAJ,iD,QAEJC,C,CAAST,CAAY,CAACU,GAAb,CAAiB,QAAjB,C,CACf,KAAKO,WAAL,CAAiBjB,CAAjB,CAA+BgB,CAA/B,K,eACsB,MAAKJ,mBAAL,CAAyB,cAAzB,CAAyCH,CAAM,CAACI,EAAhD,CAAoDG,CAApD,CAAgE5B,CAAhE,C,QAAhB0B,C,QACNd,CAAY,CAACe,cAAb,CAA4BD,CAA5B,EACA,KAAKG,WAAL,CAAiBjB,CAAjB,CAA+BgB,CAA/B,K,gMASahB,C,CAAcZ,C,2FAC3B,GAAI,CAACA,CAAL,CAAsB,CAClBA,CAAe,CAAG,CACrB,CACKqB,C,CAAST,CAAY,CAACU,GAAb,CAAiB,QAAjB,C,gBACO,MAAKE,mBAAL,CAAyB,aAAzB,CAAwCH,CAAM,CAACI,EAA/C,CAAmD,EAAnD,CAAuDzB,CAAvD,C,QAAhB0B,C,QACNd,CAAY,CAACe,cAAb,CAA4BD,CAA5B,E,kMASgBd,C,CAAcgB,C,2FACxBP,C,CAAST,CAAY,CAACU,GAAb,CAAiB,QAAjB,C,gBACO,MAAKE,mBAAL,CAAyB,gBAAzB,CAA2CH,CAAM,CAACI,EAAlD,CAAsDG,CAAtD,C,QAAhBF,C,QACNd,CAAY,CAACe,cAAb,CAA4BD,CAA5B,E,wJAUGd,C,CAAckB,C,CAAOC,C,CAAW,CACnC,KAAKC,WAAL,CAAiBpB,CAAjB,EACA,KAAKqB,iBAAL,CAAuBrB,CAAvB,CAAqC,IAArC,CAA2CkB,CAA3C,CAAkD,UAAlD,CAA8DC,CAA9D,CACH,C,gDASWnB,C,CAAcgB,C,CAAYG,C,CAAW,CAC7C,KAAKC,WAAL,CAAiBpB,CAAjB,EACA,KAAKqB,iBAAL,CAAuBrB,CAAvB,CAAqC,SAArC,CAAgDgB,CAAhD,CAA4D,UAA5D,CAAwEG,CAAxE,CACH,C,kDASYnB,C,CAAckB,C,CAAOI,C,CAAU,CACxC,GAAMC,CAAAA,CAAQ,CAAID,CAAD,CAAa,CAAb,CAAiB,CAAlC,CACA,KAAKD,iBAAL,CAAuBrB,CAAvB,CAAqC,IAArC,CAA2CkB,CAA3C,CAAkD,iBAAlD,CAAqEK,CAArE,CACH,C,sCASMvB,C,CAAckB,C,CAAOM,C,CAAW,CACnC,KAAKH,iBAAL,CAAuBrB,CAAvB,CAAqC,IAArC,CAA2CkB,CAA3C,CAAkD,QAAlD,CAA4DM,CAA5D,CACH,C,gDASWxB,C,CAAcgB,C,CAAYQ,C,CAAW,CAC7C,KAAKH,iBAAL,CAAuBrB,CAAvB,CAAqC,SAArC,CAAgDgB,CAAhD,CAA4D,QAA5D,CAAsEQ,CAAtE,CACH,C,4DAEiBxB,C,CAAcyB,C,CAAMtC,C,CAAKuC,C,CAAWH,C,CAAU,CAC5DvB,CAAY,CAAC2B,WAAb,KACAxC,CAAG,CAACyC,OAAJ,CAAY,SAACf,CAAD,CAAQ,CAChB,GAAMgB,CAAAA,CAAO,CAAG7B,CAAY,CAACU,GAAb,CAAiBe,CAAjB,CAAuBZ,CAAvB,CAAhB,CACA,GAAIgB,CAAJ,CAAa,CACTA,CAAO,CAACH,CAAD,CAAP,CAAqBH,CACxB,CACJ,CALD,EAMAvB,CAAY,CAAC2B,WAAb,IACH,C,gDAoBW3B,C,CAAc8B,C,CAAMjB,C,CAAIkB,C,CAAU,CAC1C,GAAIC,CAAAA,CAAJ,CACA,GAAIF,CAAI,SAAR,CAAwB,CACpBE,CAAW,CAAGhC,CAAY,CAACU,GAAb,CAAiBoB,CAAjB,CAAuBjB,CAAvB,CAAd,CACA,GAAI,CAACmB,CAAL,CAAkB,CACd,MACH,CACJ,CACDhC,CAAY,CAAC2B,WAAb,KAEA,GAAMlB,CAAAA,CAAM,CAAGT,CAAY,CAACU,GAAb,CAAiB,QAAjB,CAAf,CACAD,CAAM,CAACwB,QAAP,CAAkB,IAAlB,CAEA,GAAID,CAAJ,CAAiB,CACbvB,CAAM,CAACwB,QAAP,CAAkB,CACdpB,EAAE,CAAFA,CADc,CAEdiB,IAAI,CAAJA,CAFc,CAGdI,SAAS,CAAW,SAAR,EAAAJ,CAAD,CAAsBE,CAAW,CAACnB,EAAlC,CAAuCmB,CAAW,CAACG,SAHhD,CAIdJ,QAAQ,CAARA,CAJc,CAMrB,CACD/B,CAAY,CAAC2B,WAAb,IACH,C,4CAOS3B,C,CAAc,CACpB,GAAMoC,CAAAA,CAAK,CAAGpC,CAAY,CAACoC,KAA3B,CACApC,CAAY,CAAC2B,WAAb,KACAS,CAAK,CAACC,OAAN,CAAcT,OAAd,CAAsB,SAACS,CAAD,CAAa,CAC/BA,CAAO,CAAC/B,MAAR,GACH,CAFD,EAGA8B,CAAK,CAACE,EAAN,CAASV,OAAT,CAAiB,SAACU,CAAD,CAAQ,CACrBA,CAAE,CAAChC,MAAH,GACH,CAFD,EAGAN,CAAY,CAAC2B,WAAb,IACH,C,wFASwB3B,C,CAAcgB,C,CAAYuB,C,mGAC/CvC,CAAY,CAAC2B,WAAb,KAEIa,C,IACJxB,CAAU,CAACY,OAAX,CAAmB,SAAAM,CAAS,CAAI,SACtBG,CAAO,CAAGrC,CAAY,CAACU,GAAb,CAAiB,SAAjB,CAA4BwB,CAA5B,CADY,CAE5B,GAAIG,CAAO,SAAX,CAA2B,CACvB,MACH,CACD,GAAId,CAAAA,CAAQ,WAAGgB,CAAW,CAACE,gBAAf,gBAAmCJ,CAAO,CAACI,gBAAvD,CACA,GAAIJ,CAAO,CAACI,gBAAR,EAA4BlB,CAAhC,CAA0C,CACtCc,CAAO,CAACI,gBAAR,CAA2BlB,CAA3B,CACAiB,CAAiB,GACpB,CACDjB,CAAQ,WAAGgB,CAAW,CAACG,cAAf,gBAAiCL,CAAO,CAACK,cAAjD,CACA,GAAIL,CAAO,CAACK,cAAR,EAA0BnB,CAA9B,CAAwC,CACpCc,CAAO,CAACK,cAAR,CAAyBnB,CAAzB,CACAiB,CAAiB,GACpB,CACJ,CAfD,EAgBAxC,CAAY,CAAC2B,WAAb,KAEA,GAAIa,CAAJ,CAAuB,CAEb/B,CAFa,CAEJT,CAAY,CAACU,GAAb,CAAiB,QAAjB,CAFI,CAGb0B,CAHa,CAGLpC,CAAY,CAACoC,KAHR,CAIbO,CAJa,qCAI0BlC,CAAM,CAACI,EAJjC,EAKb0B,CALa,CAKC,CAChBE,gBAAgB,CAAE,EADF,CAEhBC,cAAc,CAAE,EAFA,CALD,CASnBN,CAAK,CAACC,OAAN,CAAcT,OAAd,CAAsB,SAAAS,CAAO,CAAI,CAC7B,GAAIA,CAAO,CAACI,gBAAZ,CAA8B,CAC1BF,CAAW,CAACE,gBAAZ,CAA6BG,IAA7B,CAAkCP,CAAO,CAACxB,EAA1C,CACH,CACD,GAAIwB,CAAO,CAACK,cAAZ,CAA4B,CACxBH,CAAW,CAACG,cAAZ,CAA2BE,IAA3B,CAAgCP,CAAO,CAACxB,EAAxC,CACH,CACJ,CAPD,EAQMgC,CAjBa,CAiBA/C,IAAI,CAACgD,SAAL,CAAeP,CAAf,CAjBA,CAkBnBQ,CAAC,CAACC,IAAF,CAAOC,mBAAP,CAA2BN,CAA3B,CAAoCE,CAApC,CACH,C,+LAUS7C,C,CAAcO,C,2FACxB,KAAKI,MAAL,CAAYX,CAAZ,CAA0BO,CAA1B,KACME,C,CAAST,CAAY,CAACU,GAAb,CAAiB,QAAjB,C,gBACO,MAAKE,mBAAL,CAAyB,UAAzB,CAAqCH,CAAM,CAACI,EAA5C,CAAgDN,CAAhD,C,QAAhBO,C,QACNd,CAAY,CAACe,cAAb,CAA4BD,CAA5B,EACA,KAAKH,MAAL,CAAYX,CAAZ,CAA0BO,CAA1B,K,8LAUeP,C,CAAcgB,C,2FAC7B,KAAKC,WAAL,CAAiBjB,CAAjB,CAA+BgB,CAA/B,KACMP,C,CAAST,CAAY,CAACU,GAAb,CAAiB,QAAjB,C,gBACO,MAAKE,mBAAL,CAAyB,eAAzB,CAA0CH,CAAM,CAACI,EAAjD,CAAqDG,CAArD,C,QAAhBF,C,QACNd,CAAY,CAACe,cAAb,CAA4BD,CAA5B,EACA,KAAKG,WAAL,CAAiBjB,CAAjB,CAA+BgB,CAA/B,K,kMAQchB,C,2FACRS,C,CAAST,CAAY,CAACU,GAAb,CAAiB,QAAjB,C,gBACO,MAAKE,mBAAL,CAAyB,cAAzB,CAAyCH,CAAM,CAACI,EAAhD,C,QAAhBC,C,QACNd,CAAY,CAACe,cAAb,CAA4BD,CAA5B,E","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\n\n/**\n * Default mutation manager\n *\n * @module     core_courseformat/local/courseeditor/mutations\n * @class     core_courseformat/local/courseeditor/mutations\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_courseformat_update_course webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {number} courseId\n     * @param {array} ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\n        const args = {\n            action,\n            courseid: courseId,\n            ids,\n        };\n        if (targetSectionId) {\n            args.targetsectionid = targetSectionId;\n        }\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n\n    /**\n     * Mutation module initialize.\n     *\n     * The reactive instance will execute this method when addMutations or setMutation is invoked.\n     *\n     * @param {StateManager} stateManager the state manager\n     */\n    init(stateManager) {\n        // Add a method to prepare the fields when some update is comming from the server.\n        stateManager.addUpdateTypes({\n            prepareFields: this._prepareFields,\n        });\n    }\n\n    /**\n     * Add default values to state elements.\n     *\n     * This method is called every time a webservice returns a update state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     * @returns {Object} final fields data\n     */\n    _prepareFields(stateManager, updateName, fields) {\n        // Any update should unlock the element.\n        fields.locked = false;\n        return fields;\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\n     * new location:\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\n     *                value will be ignored in this case.\n     *  - targetSectionId: the activities will be appended to the section. In this case\n     *                     targetSectionId should not be present.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {number} targetSectionId the target section id\n     * @param {number} targetCmId the target course module id\n     */\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\n        if (!targetSectionId && !targetCmId) {\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\n        }\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmids, true);\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Add a new section to a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {number} targetSectionId optional the target section id\n     */\n    async addSection(stateManager, targetSectionId) {\n        if (!targetSectionId) {\n            targetSectionId = 0;\n        }\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_add', course.id, [], targetSectionId);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of course modules ids\n     */\n    async sectionDelete(stateManager, sectionIds) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_delete', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Mark or unmark course modules as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} dragValue the new dragging value\n     */\n    cmDrag(stateManager, cmIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course sections as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} dragValue the new dragging value\n     */\n    sectionDrag(stateManager, sectionIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course modules as complete.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} complete the new completion value\n     */\n    cmCompletion(stateManager, cmIds, complete) {\n        const newValue = (complete) ? 1 : 0;\n        this._setElementsValue(stateManager, 'cm', cmIds, 'completionstate', newValue);\n    }\n\n    /**\n     * Lock or unlock course modules.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} lockValue the new locked value\n     */\n    cmLock(stateManager, cmIds, lockValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\n    }\n\n    /**\n     * Lock or unlock course sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} lockValue the new locked value\n     */\n    sectionLock(stateManager, sectionIds, lockValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\n    }\n\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\n        stateManager.setReadOnly(false);\n        ids.forEach((id) => {\n            const element = stateManager.get(name, id);\n            if (element) {\n                element[fieldName] = newValue;\n            }\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Set the page current item.\n     *\n     * Only one element of the course state can be the page item at a time.\n     *\n     * There are several actions that can alter the page current item. For example, when the user is in an activity\n     * page, the page item is always the activity one. However, in a course page, when the user scrolls to an element,\n     * this element get the page item.\n     *\n     * If the page item is static means that it is not meant to change. This is important because\n     * static page items has some special logic. For example, if a cm is the static page item\n     * and it is inside a collapsed section, the course index will expand the section to make it visible.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String|undefined} type the element type (section or cm). Undefined will remove the current page item.\n     * @param {Number|undefined} id the element id\n     * @param {boolean|undefined} isStatic if the page item is static\n     */\n    setPageItem(stateManager, type, id, isStatic) {\n        let newPageItem;\n        if (type !== undefined) {\n            newPageItem = stateManager.get(type, id);\n            if (!newPageItem) {\n                return;\n            }\n        }\n        stateManager.setReadOnly(false);\n        // Remove the current page item.\n        const course = stateManager.get('course');\n        course.pageItem = null;\n        // Save the new page item.\n        if (newPageItem) {\n            course.pageItem = {\n                id,\n                type,\n                sectionId: (type == 'section') ? newPageItem.id : newPageItem.sectionid,\n                isStatic,\n            };\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Unlock all course elements.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    unlockAll(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.section.forEach((section) => {\n            section.locked = false;\n        });\n        state.cm.forEach((cm) => {\n            cm.locked = false;\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /*\n     * Get updated user preferences and state data related to some section ids.\n     *\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     * @param {Object} preferences the new preferences values\n     */\n    async sectionPreferences(stateManager, sectionIds, preferences) {\n        stateManager.setReadOnly(false);\n        // Check if we need to update preferences.\n        let updatePreferences = false;\n        sectionIds.forEach(sectionId => {\n            const section = stateManager.get('section', sectionId);\n            if (section === undefined) {\n                return;\n            }\n            let newValue = preferences.contentcollapsed ?? section.contentcollapsed;\n            if (section.contentcollapsed != newValue) {\n                section.contentcollapsed = newValue;\n                updatePreferences = true;\n            }\n            newValue = preferences.indexcollapsed ?? section.indexcollapsed;\n            if (section.indexcollapsed != newValue) {\n                section.indexcollapsed = newValue;\n                updatePreferences = true;\n            }\n        });\n        stateManager.setReadOnly(true);\n\n        if (updatePreferences) {\n            // Build the preference structures.\n            const course = stateManager.get('course');\n            const state = stateManager.state;\n            const prefKey = `coursesectionspreferences_${course.id}`;\n            const preferences = {\n                contentcollapsed: [],\n                indexcollapsed: [],\n            };\n            state.section.forEach(section => {\n                if (section.contentcollapsed) {\n                    preferences.contentcollapsed.push(section.id);\n                }\n                if (section.indexcollapsed) {\n                    preferences.indexcollapsed.push(section.id);\n                }\n            });\n            const jsonString = JSON.stringify(preferences);\n            M.util.set_user_preference(prefKey, jsonString);\n        }\n    }\n\n    /**\n     * Get updated state data related to some cm ids.\n     *\n     * @method cmState\n     * @param {StateManager} stateManager the current state\n     * @param {array} cmids the list of cm ids to update\n     */\n    async cmState(stateManager, cmids) {\n        this.cmLock(stateManager, cmids, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Get updated state data related to some section ids.\n     *\n     * @method sectionState\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     */\n    async sectionState(stateManager, sectionIds) {\n        this.sectionLock(stateManager, sectionIds, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_state', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Get the full updated state data of the course.\n     *\n     * @param {StateManager} stateManager the current state\n     */\n    async courseState(stateManager) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        stateManager.processUpdates(updates);\n    }\n\n}\n"],"file":"mutations.min.js"}