{"version":3,"sources":["../src/notification_preference.js"],"names":["define","$","Ajax","Notification","NotificationProcessor","SELECTORS","PROCESSOR","STATE_INPUTS","NotificationPreference","element","userId","root","prototype","getPreferenceKey","attr","getEnabledPreferenceKey","getProcessors","find","map","index","startLoading","addClass","prop","stopLoading","removeClass","isLoading","hasClass","save","Deferred","resolve","enabledValue","each","processor","isEnabled","getName","args","userid","preferences","type","value","call","methodname","fail","exception","always","bind"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the preference for an individual notification type on the\n * message preference page.\n *\n * @module     core_message/notification_preference\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/notification', 'core_message/notification_processor'],\n        function($, Ajax, Notification, NotificationProcessor) {\n\n    const SELECTORS = {\n        PROCESSOR: '[data-processor-name]',\n        STATE_INPUTS: '[data-state] input',\n    };\n\n    /**\n     * Constructor for the Preference.\n     *\n     * @class\n     * @param {object} element jQuery object root element of the preference\n     * @param {int} userId The current user id\n     */\n    const NotificationPreference = function(element, userId) {\n        this.root = $(element);\n        this.userId = userId;\n    };\n\n    /**\n     * Get the unique prefix key that identifies this user preference.\n     *\n     * @method getPreferenceKey\n     * @return {string}\n     */\n    NotificationPreference.prototype.getPreferenceKey = function() {\n        return this.root.attr('data-preference-key');\n    };\n\n    /**\n     * Get the unique key for the enabled preference.\n     *\n     * @method getEnabledPreferenceKey\n     * @return {string}\n     */\n    NotificationPreference.prototype.getEnabledPreferenceKey = function() {\n        return this.getPreferenceKey() + '_enabled';\n    };\n\n    /**\n     * Get the list of Processors available for this preference.\n     *\n     * @method getProcessors\n     * @return {array}\n     */\n    NotificationPreference.prototype.getProcessors = function() {\n        return this.root.find(SELECTORS.PROCESSOR).map(function(index, element) {\n            return new NotificationProcessor($(element));\n        });\n    };\n\n    /**\n     * Flag the preference as loading.\n     *\n     * @method startLoading\n     */\n    NotificationPreference.prototype.startLoading = function() {\n        this.root.addClass('loading');\n        this.root.find(SELECTORS.STATE_INPUTS).prop('disabled', true);\n    };\n\n    /**\n     * Remove the loading flag for this preference.\n     *\n     * @method stopLoading\n     */\n    NotificationPreference.prototype.stopLoading = function() {\n        this.root.removeClass('loading');\n        this.root.find(SELECTORS.STATE_INPUTS).prop('disabled', false);\n    };\n\n    /**\n     * Check if the preference is loading.\n     *\n     * @method isLoading\n     * @return {Boolean}\n     */\n    NotificationPreference.prototype.isLoading = function() {\n        return this.root.hasClass('loading');\n    };\n\n    /**\n     * Persist the current state of the processors for this preference.\n     *\n     * @method save\n     * @return {object} jQuery promise\n     */\n    NotificationPreference.prototype.save = function() {\n        if (this.isLoading()) {\n            return $.Deferred().resolve();\n        }\n\n        this.startLoading();\n\n        let enabledValue = '';\n\n        this.getProcessors().each(function(index, processor) {\n            if (processor.isEnabled()) {\n                if (enabledValue === '') {\n                    enabledValue = processor.getName();\n                } else {\n                    enabledValue += ',' + processor.getName();\n                }\n            }\n        });\n\n        if (enabledValue === '') {\n            enabledValue = 'none';\n        }\n\n        const args = {\n            userid: this.userId,\n            preferences: [\n                {\n                    type: this.getEnabledPreferenceKey(),\n                    value: enabledValue,\n                }\n            ],\n        };\n\n        const request = {\n            methodname: 'core_user_update_user_preferences',\n            args: args,\n        };\n\n        return Ajax.call([request])[0]\n            .fail(Notification.exception)\n            .always(function() {\n                this.stopLoading();\n            }.bind(this));\n    };\n\n    return NotificationPreference;\n});\n"],"file":"notification_preference.min.js"}