{"version":3,"sources":["../../../src/local/reactive/debug.js"],"names":["reactiveInstances","reactiveDebuggers","Debug","stateData","log","debug","instance","name","state","reactives","length","replace","DebugInstance","dispatch","refreshMethod","target","addEventListener","storeTransaction","detail","changes","JSON","parse","stringify","Reactive","Mutations","stateManager","setReadOnly","has","get","countcomponents","components","readOnly","readonly","modified","Date","getTime","add","id","lastChanges","forEach","change","push","eventName","_reactiveDebugData","highlighted","updates","processUpdates","value","element","border","style","result","eventsToPublish","stateChangedEventName","dispatchStateChangedEvent","document","dispatchEvent","CustomEvent","bubbles","initDebug","eventDispatch","mutations","registerNewInstance","bind","debuggers"],"mappings":"2LAuBA,OACA,O,ijGAGMA,CAAAA,CAAiB,CAAG,E,CAGpBC,CAAiB,CAAG,E,CAgBpBC,C,gJAOcC,C,CAAW,CACvB,mDAAsBA,CAAtB,EACAC,UAAIC,KAAJ,uCACH,C,gEAgBmBC,C,CAAU,cAGtBC,CAAI,WAAGD,CAAQ,CAACC,IAAZ,kCAA+B,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,MAApD,CAHkB,CAI1BH,CAAI,CAAGA,CAAI,CAACI,OAAL,CAAa,KAAb,CAAoB,EAApB,CAAP,CAEAP,UAAIC,KAAJ,0DAA2DE,CAA3D,QAEAP,CAAiB,CAACO,CAAD,CAAjB,CAA0BD,CAA1B,CACAL,CAAiB,CAACM,CAAD,CAAjB,CAA0B,GAAIK,CAAAA,CAAJ,CAAkBZ,CAAiB,CAACO,CAAD,CAAnC,CAA1B,CAEA,KAAKM,QAAL,CAAc,aAAd,CAA6BN,CAA7B,CAAmCD,CAAnC,EAEA,GAAMQ,CAAAA,CAAa,CAAG,UAAM,CACxB,CAAI,CAACD,QAAL,CAAc,aAAd,CAA6BN,CAA7B,CAAmCD,CAAnC,CACH,CAFD,CAGAA,CAAQ,CAACS,MAAT,CAAgBC,gBAAhB,CAAiC,aAAjC,CAAgDF,CAAhD,EACAR,CAAQ,CAACS,MAAT,CAAgBC,gBAAhB,CAAiC,cAAjC,CAAiDF,CAAjD,EACAR,CAAQ,CAACS,MAAT,CAAgBC,gBAAhB,CAAiC,2BAAjC,CAA8DF,CAA9D,EACAR,CAAQ,CAACS,MAAT,CAAgBC,gBAAhB,CAAiC,iBAAjC,CAAoDF,CAApD,EAEA,GAAMG,CAAAA,CAAgB,CAAG,WAAc,IAAZC,CAAAA,CAAY,GAAZA,MAAY,CAC7BC,CAAO,QAAGD,CAAH,WAAGA,CAAH,QAAGA,CAAM,CAAEC,OADW,CAEnC,CAAI,CAACN,QAAL,CAAc,iBAAd,CAAiCN,CAAjC,CAAuCY,CAAvC,CACH,CAHD,CAIAb,CAAQ,CAACS,MAAT,CAAgBC,gBAAhB,CAAiC,mBAAjC,CAAsDC,CAAtD,CACH,C,oCAWKV,C,CAAM,CACR,MAAON,CAAAA,CAAiB,CAACM,CAAD,CAC3B,C,gCAlDU,CACP,MAAOa,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKd,KAAL,CAAWC,SAA1B,CAAX,CACV,C,cAjBec,S,EAyEdC,C,sFASUC,C,CAAclB,C,CAAMD,C,CAAU,CACtC,GAAME,CAAAA,CAAK,CAAGiB,CAAY,CAACjB,KAA3B,CAEAiB,CAAY,CAACC,WAAb,KAEA,GAAIlB,CAAK,CAACC,SAAN,CAAgBkB,GAAhB,CAAoBpB,CAApB,CAAJ,CAA+B,CAC3BC,CAAK,CAACC,SAAN,CAAgBmB,GAAhB,CAAoBrB,CAApB,EAA0BsB,eAA1B,CAA4CvB,CAAQ,CAACwB,UAAT,CAAoBpB,MAAhE,CACAF,CAAK,CAACC,SAAN,CAAgBmB,GAAhB,CAAoBrB,CAApB,EAA0BwB,QAA1B,CAAqCzB,CAAQ,CAACmB,YAAT,CAAsBO,QAA3D,CACAxB,CAAK,CAACC,SAAN,CAAgBmB,GAAhB,CAAoBrB,CAApB,EAA0B0B,QAA1B,CAAqC,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,EACxC,CAJD,IAIO,CACH3B,CAAK,CAACC,SAAN,CAAgB2B,GAAhB,CAAoB,CAChBC,EAAE,CAAE9B,CADY,CAEhBsB,eAAe,CAAEvB,CAAQ,CAACwB,UAAT,CAAoBpB,MAFrB,CAGhBqB,QAAQ,CAAEzB,CAAQ,CAACmB,YAAT,CAAsBO,QAHhB,CAIhBM,WAAW,CAAE,EAJG,CAKhBL,QAAQ,CAAE,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,EALM,CAApB,CAOH,CACDV,CAAY,CAACC,WAAb,IACH,C,wDASeD,C,CAAclB,C,CAAMY,C,CAAS,CACzC,GAAI,CAACA,CAAD,EAA+B,CAAnB,GAAAA,CAAO,CAACT,MAAxB,CAAsC,CAClC,MACH,CAHwC,GAKnCF,CAAAA,CAAK,CAAGiB,CAAY,CAACjB,KALc,CAMnC8B,CAAW,CAAG,CAAC,mBAAD,CANqB,CAQzCnB,CAAO,CAACoB,OAAR,CAAgB,SAAAC,CAAM,CAAI,CACtBF,CAAW,CAACG,IAAZ,CAAiBD,CAAM,CAACE,SAAxB,CACH,CAFD,EAIAJ,CAAW,CAACG,IAAZ,CAAiB,iBAAjB,EAEAhB,CAAY,CAACC,WAAb,KAEAlB,CAAK,CAACC,SAAN,CAAgBmB,GAAhB,CAAoBrB,CAApB,EAA0B+B,WAA1B,CAAwCA,CAAxC,CAEAb,CAAY,CAACC,WAAb,IACH,C,gBAUCd,C,YAOF,WAAYN,CAAZ,CAAsB,WAClB,KAAKA,QAAL,CAAgBA,CAAhB,CAGA,GAAIA,CAAQ,CAACqC,kBAAT,SAAJ,CAA+C,CAC3CrC,CAAQ,CAACqC,kBAAT,CAA8B,CAC1BC,WAAW,GADe,CAGjC,CACJ,C,sLAuFG,QAAKtC,QAAL,EAAcO,QAAd,Y,mKA8BWgC,C,CAAS,CACpB,KAAKvC,QAAL,CAAcmB,YAAd,CAA2BqB,cAA3B,CAA0CD,CAA1C,CACH,C,mCA9GYE,C,CAAO,CAChB,KAAKzC,QAAL,CAAcmB,YAAd,CAA2BC,WAA3B,CAAuCqB,CAAvC,CACH,C,mBAOc,CACX,MAAO,MAAKzC,QAAL,CAAcmB,YAAd,CAA2BO,QACrC,C,iCAOW,CACR,MAAO,MAAK1B,QAAL,CAAcE,KACxB,C,oCAOauC,C,CAAO,CACjB,KAAKzC,QAAL,CAAcqC,kBAAd,CAAiCC,WAAjC,CAA+CG,CAA/C,CACA,KAAKzC,QAAL,CAAcwB,UAAd,CAAyBS,OAAzB,CAAiC,WAAe,IAAbS,CAAAA,CAAa,GAAbA,OAAa,CACtCC,CAAM,CAAIF,CAAD,uBAAkC,EADL,CAE5CC,CAAO,CAACE,KAAR,CAAcD,MAAd,CAAuBA,CAC1B,CAHD,CAIH,C,mBAOe,CACZ,MAAO,MAAK3C,QAAL,CAAcqC,kBAAd,CAAiCC,WAC3C,C,sCAOgB,CACb,SAAW,KAAKtC,QAAL,CAAcwB,UAAzB,CACH,C,mCAOa,CACV,GAAMqB,CAAAA,CAAM,CAAG,EAAf,CACA,KAAK7C,QAAL,CAAcmB,YAAd,CAA2B2B,eAA3B,CAA2Cb,OAA3C,CACI,SAACS,CAAD,CAAa,CACTG,CAAM,CAACV,IAAP,CAAYO,CAAO,CAACN,SAApB,CACH,CAHL,EAKA,MAAOS,CAAAA,CACV,C,oCAoBc,CACX,GAAMA,CAAAA,CAAM,CAAG,EAAf,CACA,KAAK7C,QAAL,CAAcwB,UAAd,CAAyBS,OAAzB,CAAiC,WAAe,IAAbS,CAAAA,CAAa,GAAbA,OAAa,CAC5CG,CAAM,CAACV,IAAP,CAAYO,CAAZ,CACH,CAFD,EAGA,MAAOG,CAAAA,CACV,C,qCAOe,CACZ,MAAO/B,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKd,KAApB,CAAX,CACV,C,gBAYC6C,CAAqB,CAAG,kC,CAS9B,QAASC,CAAAA,CAAT,CAAmCpC,CAAnC,CAA2CH,CAA3C,CAAmD,CAC/C,GAAIA,CAAM,SAAV,CAA0B,CACtBA,CAAM,CAAGwC,QACZ,CACDxC,CAAM,CAACyC,aAAP,CACI,GAAIC,CAAAA,WAAJ,CACIJ,CADJ,CAEI,CACIK,OAAO,GADX,CAEIxC,MAAM,CAAEA,CAFZ,CAFJ,CADJ,CASH,C,YAMwB,QAAZyC,CAAAA,SAAY,EAAM,CAC3B,GAAMtD,CAAAA,CAAK,CAAG,GAAIH,CAAAA,CAAJ,CAAU,CACpBK,IAAI,CAAE,mBADc,CAEpBmC,SAAS,CAAEW,CAFS,CAGpBO,aAAa,CAAEN,CAHK,CAIpBO,SAAS,CAAE,GAAIrC,CAAAA,CAJK,CAKpBhB,KAAK,CAAE,CACHC,SAAS,CAAE,EADR,CALa,CAAV,CAAd,CAYAR,CAAiB,CAAC6D,mBAAlB,CAAwCzD,CAAK,CAACyD,mBAAN,CAA0BC,IAA1B,CAA+B1D,CAA/B,CAAxC,CAEA,MAAO,CACHA,KAAK,CAALA,CADG,CAEH2D,SAAS,CAAE/D,CAFR,CAIV,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Reactive module debug tools.\n *\n * @module     core/reactive/local/reactive/debug\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Reactive from 'core/local/reactive/reactive';\nimport log from 'core/log';\n\n// The list of reactives instances.\nconst reactiveInstances = {};\n\n// The reactive debugging objects.\nconst reactiveDebuggers = {};\n\n/**\n * Reactive module debug tools.\n *\n * If debug is enabled, this reactive module will spy all the reactive instances and keep a record\n * of the changes and components they have.\n *\n * It is important to note that the Debug class is also a Reactive module. The debug instance keeps\n * the reactive instances data as its own state. This way it is possible to implement development tools\n * that whatches this data.\n *\n * @class      core/reactive/local/reactive/debug/Debug\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass Debug extends Reactive {\n\n    /**\n     * Set the initial state.\n     *\n     * @param {object} stateData the initial state data.\n     */\n    setInitialState(stateData) {\n        super.setInitialState(stateData);\n        log.debug(`Debug module \"M.reactive\" loaded.`);\n    }\n\n    /**\n     * List the currents page reactives instances.\n     */\n    get list() {\n        return JSON.parse(JSON.stringify(this.state.reactives));\n    }\n\n    /**\n     * Register a new Reactive instance.\n     *\n     * This method is called every time a \"new Reactive\" is executed.\n     *\n     * @param {Reactive} instance the reactive instance\n     */\n    registerNewInstance(instance) {\n\n        // Generate a valid variable name for that instance.\n        let name = instance.name ?? `instance${this.state.reactives.length}`;\n        name = name.replace(/\\W/g, '');\n\n        log.debug(`Registering new reactive instance \"M.reactive.${name}\"`);\n\n        reactiveInstances[name] = instance;\n        reactiveDebuggers[name] = new DebugInstance(reactiveInstances[name]);\n        // Register also in the state.\n        this.dispatch('putInstance', name, instance);\n        // Add debug watchers to instance.\n        const refreshMethod = () => {\n            this.dispatch('putInstance', name, instance);\n        };\n        instance.target.addEventListener('readmode:on', refreshMethod);\n        instance.target.addEventListener('readmode:off', refreshMethod);\n        instance.target.addEventListener('registerComponent:success', refreshMethod);\n        instance.target.addEventListener('transaction:end', refreshMethod);\n        // We store the last transaction into the state.\n        const storeTransaction = ({detail}) => {\n            const changes = detail?.changes;\n            this.dispatch('lastTransaction', name, changes);\n        };\n        instance.target.addEventListener('transaction:start', storeTransaction);\n    }\n\n    /**\n     * Returns a debugging object for a specific Reactive instance.\n     *\n     * A debugging object is a class that wraps a Reactive instance to quick access some of the\n     * reactive methods using the browser JS console.\n     *\n     * @param {string} name the Reactive instance name\n     * @returns {DebugInstance} a debug object wrapping the Reactive instance\n     */\n    debug(name) {\n        return reactiveDebuggers[name];\n    }\n}\n\n/**\n * The debug state mutations class.\n *\n * @class core/reactive/local/reactive/debug/Mutations\n */\nclass Mutations {\n\n    /**\n     * Insert or update a new instance into the debug state.\n     *\n     * @param {StateManager} stateManager the debug state manager\n     * @param {string} name the instance name\n     * @param {Reactive} instance the reactive instance\n     */\n    putInstance(stateManager, name, instance) {\n        const state = stateManager.state;\n\n        stateManager.setReadOnly(false);\n\n        if (state.reactives.has(name)) {\n            state.reactives.get(name).countcomponents = instance.components.length;\n            state.reactives.get(name).readOnly = instance.stateManager.readonly;\n            state.reactives.get(name).modified = new Date().getTime();\n        } else {\n            state.reactives.add({\n                id: name,\n                countcomponents: instance.components.length,\n                readOnly: instance.stateManager.readonly,\n                lastChanges: [],\n                modified: new Date().getTime(),\n            });\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Update the lastChanges attribute with a list of changes\n     *\n     * @param {StateManager} stateManager the debug reactive state\n     * @param {string} name tje instance name\n     * @param {array} changes the list of changes\n     */\n    lastTransaction(stateManager, name, changes) {\n        if (!changes || changes.length === 0) {\n            return;\n        }\n\n        const state = stateManager.state;\n        const lastChanges = ['transaction:start'];\n\n        changes.forEach(change => {\n            lastChanges.push(change.eventName);\n        });\n\n        lastChanges.push('transaction:end');\n\n        stateManager.setReadOnly(false);\n\n        state.reactives.get(name).lastChanges = lastChanges;\n\n        stateManager.setReadOnly(true);\n    }\n}\n\n/**\n * Class used to debug a specific instance and manipulate the state from the JS console.\n *\n * @class      core/reactive/local/reactive/debug/DebugInstance\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass DebugInstance {\n\n    /**\n     * Constructor.\n     *\n     * @param {Reactive} instance the reactive instance\n     */\n    constructor(instance) {\n        this.instance = instance;\n        // Add some debug data directly into the instance. This way we avoid having attributes\n        // that will confuse the console aoutocomplete.\n        if (instance._reactiveDebugData === undefined) {\n            instance._reactiveDebugData = {\n                highlighted: false,\n            };\n        }\n    }\n\n    /**\n     * Set the read only mode.\n     *\n     * Quick access to the instance setReadOnly method.\n     *\n     * @param {bool} value the new read only value\n     */\n    set readOnly(value) {\n        this.instance.stateManager.setReadOnly(value);\n    }\n\n    /**\n     * Get the read only value\n     *\n     * @returns {bool}\n     */\n    get readOnly() {\n        return this.instance.stateManager.readonly;\n    }\n\n    /**\n     * Return the current state object.\n     *\n     * @returns {object}\n     */\n    get state() {\n        return this.instance.state;\n    }\n\n    /**\n     * Tooggle the reactive HTML element highlight registered in this reactive instance.\n     *\n     * @param {bool} value the highlight value\n     */\n    set highlight(value) {\n        this.instance._reactiveDebugData.highlighted = value;\n        this.instance.components.forEach(({element}) => {\n            const border = (value) ? `thick solid #0000FF` : '';\n            element.style.border = border;\n        });\n    }\n\n    /**\n     * Get the current highligh value.\n     *\n     * @returns {bool}\n     */\n    get highlight() {\n        return this.instance._reactiveDebugData.highlighted;\n    }\n\n    /**\n     * List all the components registered in this instance.\n     *\n     * @returns {array}\n     */\n    get components() {\n        return [...this.instance.components];\n    }\n\n    /**\n     * List all the state changes evenet pending to dispatch.\n     *\n     * @returns {array}\n     */\n    get changes() {\n        const result = [];\n        this.instance.stateManager.eventsToPublish.forEach(\n            (element) => {\n                result.push(element.eventName);\n            }\n        );\n        return result;\n    }\n\n    /**\n     * Dispatch a change in the state.\n     *\n     * Usually reactive modules throw an error directly to the components when something\n     * goes wrong. However, course editor can directly display a notification.\n     *\n     * @method dispatch\n     * @param {*} args\n     */\n    async dispatch(...args) {\n        this.instance.dispatch(...args);\n    }\n\n    /**\n     * Return all the HTML elements registered in the instance components.\n     *\n     * @returns {array}\n     */\n    get elements() {\n        const result = [];\n        this.instance.components.forEach(({element}) => {\n            result.push(element);\n        });\n        return result;\n    }\n\n    /**\n     * Return a plain copy of the state data.\n     *\n     * @returns {object}\n     */\n    get stateData() {\n        return JSON.parse(JSON.stringify(this.state));\n    }\n\n    /**\n     * Process an update state array.\n     *\n     * @param {array} updates an array of update state messages\n     */\n    processUpdates(updates) {\n        this.instance.stateManager.processUpdates(updates);\n    }\n}\n\nconst stateChangedEventName = 'core_reactive_debug:stateChanged';\n\n/**\n * Internal state changed event.\n *\n * @method dispatchStateChangedEvent\n * @param {object} detail the full state\n * @param {object} target the custom event target (document if none provided)\n */\nfunction dispatchStateChangedEvent(detail, target) {\n    if (target === undefined) {\n        target = document;\n    }\n    target.dispatchEvent(\n        new CustomEvent(\n            stateChangedEventName,\n            {\n                bubbles: true,\n                detail: detail,\n            }\n        )\n    );\n}\n\n/**\n * The main init method to initialize the reactive debug.\n * @returns {object}\n */\nexport const initDebug = () => {\n    const debug = new Debug({\n        name: 'CoreReactiveDebug',\n        eventName: stateChangedEventName,\n        eventDispatch: dispatchStateChangedEvent,\n        mutations: new Mutations(),\n        state: {\n            reactives: [],\n        },\n    });\n\n    // The reactiveDebuggers will be used as a way of access the debug instances but also to register every new\n    // instance. To ensure this will update the reactive debug state we add the registerNewInstance method to it.\n    reactiveDebuggers.registerNewInstance = debug.registerNewInstance.bind(debug);\n\n    return {\n        debug,\n        debuggers: reactiveDebuggers,\n    };\n};\n"],"file":"debug.min.js"}