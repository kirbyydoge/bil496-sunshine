{"version":3,"sources":["../src/timer.js"],"names":["endTime","timeoutId","timer","formatSeconds","secs","hours","Math","floor","minutes","filter","value","index","map","padStart","join","stop","clearTimeout","update","now","Date","getTime","secondsLeft","classList","add","innerHTML","document","getElementById","then","message","Notification","addNotification","catch","exception","remove","setTimeout","init","timerId","M","pageloadstarttime","dataset","starttime"],"mappings":"kKAeA,uD,GAeIA,CAAAA,CAAO,CAAG,C,CAOVC,CAAS,CAAG,I,CAOZC,CAAK,CAAG,I,CASNC,CAAa,CAAG,SAACC,CAAD,CAAU,IACtBC,CAAAA,CAAK,CAAGC,IAAI,CAACC,KAAL,CAAWH,CAAI,CAAG,IAAlB,CADc,CAEtBI,CAAO,CAAGF,IAAI,CAACC,KAAL,CAAWH,CAAI,CAAG,EAAlB,EAAwB,EAFZ,CAK5B,MAAO,CAACC,CAAD,CAAQG,CAAR,CAFSJ,CAAI,CAAG,EAEhB,EAEFK,MAFE,CAEK,SAACC,CAAD,CAAQC,CAAR,QAA4B,EAAV,GAAAD,CAAK,EAAkB,CAAR,CAAAC,CAAjC,CAFL,EAIFC,GAJE,CAIE,SAAAF,CAAK,QAAI,UAAGA,CAAH,EAAWG,QAAX,CAAoB,CAApB,CAAuB,GAAvB,CAAJ,CAJP,EAKFC,IALE,CAKG,GALH,CAMV,C,CAOKC,CAAI,CAAG,UAAM,CACf,GAAId,CAAJ,CAAe,CACXe,YAAY,CAACf,CAAD,CACf,CACJ,C,CAOKgB,CAAM,CAAG,UAAM,IACXC,CAAAA,CAAG,CAAG,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,EADK,CAEXC,CAAW,CAAGf,IAAI,CAACC,KAAL,CAAW,CAACP,CAAO,CAAGkB,CAAX,EAAkB,GAA7B,CAFH,CAKjB,GAAmB,CAAf,EAAAG,CAAJ,CAAsB,CAClBnB,CAAK,CAACoB,SAAN,CAAgBC,GAAhB,CAAoB,OAApB,CAA6B,cAA7B,EACArB,CAAK,CAACsB,SAAN,CAAkB,UAAlB,CAGA,GAAIC,QAAQ,CAACC,cAAT,CAAwB,4BAAxB,CAAJ,CAA2D,CACvD,iBAAU,mBAAV,CAA+B,YAA/B,EACKC,IADL,CACU,SAAAC,CAAO,QAAIC,WAAaC,eAAb,CAA6B,CAACF,OAAO,CAAPA,CAAD,CAA7B,CAAJ,CADjB,EAEKG,KAFL,CAEWF,UAAaG,SAFxB,CAGH,CAEDjB,CAAI,GACJ,MACH,CAbD,IAaO,IAAkB,GAAd,CAAAM,CAAJ,CAAuB,CAC1BnB,CAAK,CAACoB,SAAN,CAAgBW,MAAhB,CAAuB,eAAvB,EACA/B,CAAK,CAACoB,SAAN,CAAgBC,GAAhB,CAAoB,OAApB,CAA6B,cAA7B,CACH,CAHM,IAGA,IAAkB,GAAd,CAAAF,CAAJ,CAAuB,CAC1BnB,CAAK,CAACoB,SAAN,CAAgBW,MAAhB,CAAuB,cAAvB,EACA/B,CAAK,CAACoB,SAAN,CAAgBC,GAAhB,CAAoB,OAApB,CAA6B,eAA7B,CACH,CAGDrB,CAAK,CAACsB,SAAN,CAAkBrB,CAAa,CAACkB,CAAD,CAA/B,CAGApB,CAAS,CAAGiC,UAAU,CAACjB,CAAD,CAAS,GAAT,CACzB,C,CAQYkB,CAAI,CAAG,SAACC,CAAD,CAAa,CAC7BlC,CAAK,CAAGuB,QAAQ,CAACC,cAAT,CAAwBU,CAAxB,CAAR,CACApC,CAAO,CAAGqC,CAAC,CAACC,iBAAF,CAAoBlB,OAApB,GAA2D,GAA1B,CAAAlB,CAAK,CAACqC,OAAN,CAAcC,SAAzD,CACAvB,CAAM,EACT,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\n/**\n * A javascript module for the time in the assign module.\n *\n * @copyright  2020 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Timestamp at which time runs out.\n *\n * @property {Number} endTime\n */\nlet endTime = 0;\n\n/**\n * ID of the timeout that updates the clock.\n *\n * @property {Number} timeoutId\n */\nlet timeoutId = null;\n\n/**\n * The timer element.\n *\n * @property {Element} timer\n */\nlet timer = null;\n\n/**\n * Helper method to convert time remaining in seconds into HH:MM:SS format.\n *\n * @method formatSeconds\n * @param {Number} secs Time remaining in seconds to get value for.\n * @return {String} Time remaining in HH:MM:SS format.\n */\nconst formatSeconds = (secs) => {\n    const hours = Math.floor(secs / 3600);\n    const minutes = Math.floor(secs / 60) % 60;\n    const seconds = secs % 60;\n\n    return [hours, minutes, seconds]\n        // Remove the hours column if there is less than 1 hour left.\n        .filter((value, index) => value !== 0 || index > 0)\n        // Ensure that all fields are two digit numbers.\n        .map(value => `${value}`.padStart(2, '0'))\n        .join(\":\");\n};\n\n/**\n * Stop the timer, if it is running.\n *\n * @method stop\n */\nconst stop = () => {\n    if (timeoutId) {\n        clearTimeout(timeoutId);\n    }\n};\n\n/**\n * Function to update the clock with the current time left.\n *\n * @method update\n */\nconst update = () => {\n    const now = new Date().getTime();\n    const secondsLeft = Math.floor((endTime - now) / 1000);\n\n    // If time has expired, set the hidden form field that says time has expired.\n    if (secondsLeft <= 0) {\n        timer.classList.add('alert', 'alert-danger');\n        timer.innerHTML = '00:00:00';\n\n        // Only add a notification on the assign submission page.\n        if (document.getElementById(\"mod_assign_timelimit_block\")) {\n            getString('caneditsubmission', 'mod_assign')\n                .then(message => Notification.addNotification({message}))\n                .catch(Notification.exception);\n        }\n\n        stop();\n        return;\n    } else if (secondsLeft < 300) { // Add danger style when less than 5 minutes left.\n        timer.classList.remove('alert-warning');\n        timer.classList.add('alert', 'alert-danger');\n    } else if (secondsLeft < 900) { // Add warning style when less than 15 minutes left.\n        timer.classList.remove('alert-danger');\n        timer.classList.add('alert', 'alert-warning');\n    }\n\n    // Update the time display.\n    timer.innerHTML = formatSeconds(secondsLeft);\n\n    // Arrange for this method to be called again soon.\n    timeoutId = setTimeout(update, 500);\n};\n\n/**\n * Set up the submission timer.\n *\n * @method init\n * @param {Number} timerId Unique ID of the timer element.\n */\nexport const init = (timerId) => {\n    timer = document.getElementById(timerId);\n    endTime = M.pageloadstarttime.getTime() + (timer.dataset.starttime * 1000);\n    update();\n};\n"],"file":"timer.min.js"}