{"version":3,"sources":["../src/recordings.js"],"names":["stringsWithKeys","first","prev","next","last","page","go","rows","all","Object","entries","map","entry","getStringsForYui","stringMap","keys","key","component","then","stringArray","assign","index","catch","getYuiInstance","lang","Promise","resolve","YUI","use","Y","formatDate","locale","date","realDate","Date","toLocaleDateString","weekday","year","month","day","getFormattedData","response","recordingData","tabledata","JSON","parse","data","getTableNode","tableSelector","document","querySelector","fetchRecordingData","tableNode","dataset","importMode","repository","fetchRecordingsToImport","bbbid","bbbSourceInstanceId","bbbSourceCourseId","tools","groupId","fetchRecordings","getDataTableFunctions","tableId","searchFormId","dataTable","updateTableFromResponse","status","get","reset","set","currentFilter","filterByText","refreshTableData","value","dataModel","escapedRegex","replace","rsearch","RegExp","filter","asList","item","name","test","description","requestAction","element","getDataFromAction","dataType","dataElement","closest","elementData","payload","bigbluebuttonbnid","recordingid","additionaloptions","action","bbbsourceid","bbbcourseid","sourceid","stringify","requireConfirmation","ModalFactory","create","title","body","recordingConfirmationMessage","type","types","SAVE_CANCEL","modal","setSaveButtonText","getRoot","on","ModalEvents","save","hidden","destroy","show","Notification","exception","proceed","updateRecording","playbackElement","imported","recordingType","confirmation","associatedLinkCount","links","confirmationWarning","processAction","e","popoutLink","target","preventDefault","videoPlayer","window","open","opener","location","href","clickedLink","classList","contains","iconPromise","getDOMNode","displayException","processSearchSubmission","parentNode","searchInput","registerEventListeners","boundingBox","addEventListener","searchForm","searchButton","setupDatatable","pendingPromise","Pending","yuiInstance","strings","Intl","add","config","DataTable","BodyView","Formatters","customDate","dateCustomFormatter","cell","tableData","RecordsPaginatorView","Base","Paginator","View","_modelChange","changed","totalItems","_updateControlsUI","paginatorView","width","columns","rowsPerPage","paginatorLocation","autoSync","render","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the recordings page on mod_bigbluebuttonbn plugin.\n *\n * @module      mod_bigbluebuttonbn/recordings\n * @copyright   2021 Blindside Networks Inc\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as repository from './repository';\nimport {exception as displayException} from 'core/notification';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Pending from 'core/pending';\n\nconst stringsWithKeys = {\n    first: 'view_recording_yui_first',\n    prev: 'view_recording_yui_prev',\n    next: 'view_recording_yui_next',\n    last: 'view_recording_yui_last',\n    page: 'view_recording_yui_page',\n    go: 'view_recording_yui_go',\n    rows: 'view_recording_yui_rows',\n    all: 'view_recording_yui_all',\n};\n// Load global strings.\nprefetchStrings('bigbluebuttonbn', Object.entries(stringsWithKeys).map((entry) => entry[1]));\n\nconst getStringsForYui = () => {\n    const stringMap = Object.keys(stringsWithKeys).map(key => {\n        return {\n            key: stringsWithKeys[key],\n            component: 'mod_bigbluebuttonbn',\n        };\n    });\n\n    // Return an object with the matching string keys (we want an object with {<stringkey>: <stringvalue>...}).\n    return getStrings(stringMap)\n        .then((stringArray) => Object.assign({}, ...Object.keys(stringsWithKeys).map(\n            (key, index) => ({[key]: stringArray[index]})))\n        ).catch();\n};\n\nconst getYuiInstance = lang => new Promise(resolve => {\n    // eslint-disable-next-line\n    YUI({\n        lang,\n    }).use('intl', 'datatable', 'datatable-sort', 'datatable-paginator', 'datatype-number', Y => {\n        resolve(Y);\n    });\n});\n\n/**\n * Format the supplied date per the specified locale.\n *\n * @param   {string} locale\n * @param   {number} date\n * @returns {array}\n */\nconst formatDate = (locale, date) => {\n    const realDate = new Date(date);\n    return realDate.toLocaleDateString(locale, {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    });\n};\n\n/**\n * Format response data for the table.\n *\n * @param   {string} response JSON-encoded table data\n * @returns {array}\n */\nconst getFormattedData = response => {\n    const recordingData = response.tabledata;\n    return JSON.parse(recordingData.data);\n};\n\nconst getTableNode = tableSelector => document.querySelector(tableSelector);\n\nconst fetchRecordingData = tableSelector => {\n    const tableNode = getTableNode(tableSelector);\n\n    if (tableNode.dataset.importMode) {\n        return repository.fetchRecordingsToImport(\n            tableNode.dataset.bbbid,\n            tableNode.dataset.bbbSourceInstanceId,\n            tableNode.dataset.bbbSourceCourseId,\n            tableNode.dataset.tools,\n            tableNode.dataset.groupId\n        );\n    } else {\n        return repository.fetchRecordings(\n            tableNode.dataset.bbbid,\n            tableNode.dataset.tools,\n            tableNode.dataset.groupId\n        );\n    }\n};\n\n/**\n * Fetch the data table functinos for the specified table.\n *\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n * @param {Object} dataTable\n * @returns {Object}\n * @private\n */\nconst getDataTableFunctions = (tableId, searchFormId, dataTable) => {\n    const tableNode = getTableNode(tableId);\n    const bbbid = tableNode.dataset.bbbid;\n\n    const updateTableFromResponse = response => {\n        if (!response || !response.status) {\n            // There was no output at all.\n            return;\n        }\n\n        dataTable.get('data').reset(getFormattedData(response));\n        dataTable.set(\n            'currentData',\n            dataTable.get('data')\n        );\n\n        const currentFilter = dataTable.get('currentFilter');\n        if (currentFilter) {\n            filterByText(currentFilter);\n        }\n    };\n\n    const refreshTableData = () => fetchRecordingData(tableId).then(updateTableFromResponse);\n\n    const filterByText = value => {\n        const dataModel = dataTable.get('currentData');\n        dataTable.set('currentFilter', value);\n\n        const escapedRegex = value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n        const rsearch = new RegExp(`<span>.*?${escapedRegex}.*?</span>`, 'i');\n\n        dataTable.set('data', dataModel.filter({asList: true}, item => {\n            const name = item.get('recording');\n            if (name && rsearch.test(name)) {\n                return true;\n            }\n\n            const description = item.get('description');\n            return description && rsearch.test(description);\n        }));\n    };\n\n    const requestAction = (element) => {\n        const getDataFromAction = (element, dataType) => {\n            const dataElement = element.closest(`[data-${dataType}]`);\n            if (dataElement) {\n                return dataElement.dataset[dataType];\n            }\n\n            return null;\n        };\n\n        const elementData = element.dataset;\n        const payload = {\n            bigbluebuttonbnid: bbbid,\n            recordingid: getDataFromAction(element, 'recordingid'),\n            additionaloptions: getDataFromAction(element, 'additionaloptions'),\n            action: elementData.action,\n        };\n        // Slight change for import, for additional options.\n        if (!payload.additionaloptions) {\n            payload.additionaloptions = {};\n        }\n        if (elementData.action === 'import') {\n            const bbbsourceid = getDataFromAction(element, 'source-instance-id');\n            const bbbcourseid = getDataFromAction(element, 'source-course-id');\n            if (!payload.additionaloptions) {\n                payload.additionaloptions = {};\n            }\n            payload.additionaloptions.sourceid = bbbsourceid ? bbbsourceid : 0;\n            payload.additionaloptions.bbbcourseid = bbbcourseid ? bbbcourseid : 0;\n        }\n        // Now additional options should be a json string.\n        payload.additionaloptions = JSON.stringify(payload.additionaloptions);\n        if (element.dataset.requireConfirmation === \"1\") {\n            // Create the confirmation dialogue.\n            return new Promise((resolve) =>\n                ModalFactory.create({\n                    title: getString('confirm'),\n                    body: recordingConfirmationMessage(payload),\n                    type: ModalFactory.types.SAVE_CANCEL\n                }).then(async(modal) => {\n                    modal.setSaveButtonText(await getString('ok', 'moodle'));\n\n                    // Handle save event.\n                    modal.getRoot().on(ModalEvents.save, () => {\n                        resolve(true);\n                    });\n\n                    // Handle hidden event.\n                    modal.getRoot().on(ModalEvents.hidden, () => {\n                        // Destroy when hidden.\n                        modal.destroy();\n                        resolve(false);\n                    });\n\n                    modal.show();\n\n                    return modal;\n                }).catch(Notification.exception)\n            ).then((proceed) =>\n                proceed ? repository.updateRecording(payload) : () => null\n            );\n        } else {\n            return repository.updateRecording(payload);\n        }\n    };\n\n    const recordingConfirmationMessage = async(data) => {\n\n        const playbackElement = document.querySelector(`#playbacks-${data.recordingid}`);\n        const recordingType = await getString(\n            playbackElement.dataset.imported === 'true' ? 'view_recording_link' : 'view_recording',\n            'bigbluebuttonbn'\n        );\n\n        const confirmation = await getString(`view_recording_${data.action}_confirmation`, 'bigbluebuttonbn', recordingType);\n\n        if (data.action === 'import') {\n            return confirmation;\n        }\n\n        // If it has associated links imported in a different course/activity, show that in confirmation dialog.\n        const associatedLinkCount = document.querySelector(`a#recording-${data.action}-${data.recordingid}`)?.dataset?.links;\n        if (!associatedLinkCount || associatedLinkCount === 0) {\n            return confirmation;\n        }\n\n        const confirmationWarning = await getString(\n            associatedLinkCount === 1\n                ? `view_recording_${data.action}_confirmation_warning_p`\n                : `view_recording_${data.action}_confirmation_warning_s`,\n            'bigbluebuttonbn',\n            associatedLinkCount\n        );\n\n        return confirmationWarning + '\\n\\n' + confirmation;\n    };\n\n    /**\n     * Process an action event.\n     *\n     * @param   {Event} e\n     */\n    const processAction = e => {\n        const popoutLink = e.target.closest('[data-action=\"play\"]');\n        if (popoutLink) {\n            e.preventDefault();\n\n            const videoPlayer = window.open('', '_blank');\n            videoPlayer.opener = null;\n            videoPlayer.location.href = popoutLink.href;\n            // TODO send a recording viewed event when this event will be implemented.\n            return;\n        }\n\n        // Fetch any clicked anchor.\n        const clickedLink = e.target.closest('a[data-action]');\n        if (clickedLink && !clickedLink.classList.contains('disabled')) {\n            e.preventDefault();\n\n            // Create a spinning icon on the table.\n            const iconPromise = addIconToContainerWithPromise(dataTable.get('boundingBox').getDOMNode());\n\n            requestAction(clickedLink)\n                .then(refreshTableData)\n                .catch(displayException)\n                .then(iconPromise.resolve)\n                .catch();\n        }\n    };\n\n    const processSearchSubmission = e => {\n        // Prevent the default action.\n        e.preventDefault();\n        const parentNode = e.target.closest('div[role=search]');\n        const searchInput = parentNode.querySelector('input[name=search]');\n        filterByText(searchInput.value);\n    };\n\n    const registerEventListeners = () => {\n        // Add event listeners to the table boundingBox.\n        const boundingBox = dataTable.get('boundingBox').getDOMNode();\n        boundingBox.addEventListener('click', processAction);\n\n        // Setup the search from handlers.\n        const searchForm = document.querySelector(searchFormId);\n        if (searchForm) {\n            const searchButton = document.querySelector(searchFormId + ' button');\n            searchButton.addEventListener('click', processSearchSubmission);\n        }\n    };\n\n    return {\n        filterByText,\n        refreshTableData,\n        registerEventListeners,\n    };\n};\n\n/**\n * Setup the data table for the specified BBB instance.\n *\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n * @param   {object} response The response from the data request\n * @returns {Promise}\n */\nconst setupDatatable = (tableId, searchFormId, response) => {\n    if (!response) {\n        return Promise.resolve();\n    }\n\n    if (!response.status) {\n        // Something failed. Continue to show the plain output.\n        return Promise.resolve();\n    }\n\n    const recordingData = response.tabledata;\n\n    const pendingPromise = new Pending('mod_bigbluebuttonbn/recordings/setupDatatable');\n    return Promise.all([getYuiInstance(recordingData.locale), getStringsForYui()])\n        .then(([yuiInstance, strings]) => {\n            // Here we use a custom formatter for date.\n            // See https://clarle.github.io/yui3/yui/docs/api/classes/DataTable.BodyView.Formatters.html\n            // Inspired from examples here: https://clarle.github.io/yui3/yui/docs/datatable/\n            // Normally formatter have the prototype: (col) => (cell) => <computed value>, see:\n            // https://clarle.github.io/yui3/yui/docs/api/files/datatable_js_formatters.js.html#l100 .\n            const dateCustomFormatter = () => (cell) => formatDate(recordingData.locale, cell.value);\n            // Add the fetched strings to the YUI Instance.\n            yuiInstance.Intl.add('datatable-paginator', yuiInstance.config.lang, {...strings});\n            yuiInstance.DataTable.BodyView.Formatters.customDate = dateCustomFormatter;\n            return yuiInstance;\n        })\n        .then(yuiInstance => {\n\n            const tableData = getFormattedData(response);\n            yuiInstance.RecordsPaginatorView = Y.Base.create('my-paginator-view', yuiInstance.DataTable.Paginator.View, [], {\n                _modelChange: function(e) {\n                    var changed = e.changed,\n                        totalItems = (changed && changed.totalItems);\n                    if (totalItems) {\n                        this._updateControlsUI(e.target.get('page'));\n                    }\n                }\n            });\n            return new yuiInstance.DataTable({\n                paginatorView: \"RecordsPaginatorView\",\n                width: \"1195px\",\n                columns: recordingData.columns,\n                data: tableData,\n                rowsPerPage: 10,\n                paginatorLocation: ['header', 'footer'],\n                autoSync: true\n            });\n        })\n        .then(dataTable => {\n            dataTable.render(tableId);\n            const {registerEventListeners} = getDataTableFunctions(\n                tableId,\n                searchFormId,\n                dataTable);\n            registerEventListeners();\n            return dataTable;\n        })\n        .then(dataTable => {\n            pendingPromise.resolve();\n            return dataTable;\n        });\n};\n\n/**\n * Initialise recordings code.\n *\n * @method init\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n */\nexport const init = (tableId, searchFormId) => {\n    fetchRecordingData(tableId)\n        .then(response => setupDatatable(tableId, searchFormId, response))\n        .catch(displayException);\n};\n"],"file":"recordings.min.js"}